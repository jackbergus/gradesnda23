# Generated from /home/giacomo/projects/loggen/convert_same/scratch.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,134,8,18,1,19,1,19,5,19,
        138,8,19,10,19,12,19,141,9,19,1,20,3,20,144,8,20,1,20,4,20,147,8,
        20,11,20,12,20,148,1,21,3,21,152,8,21,1,21,1,21,1,21,3,21,157,8,
        21,1,22,1,22,1,22,1,22,5,22,163,8,22,10,22,12,22,166,9,22,1,22,1,
        22,1,23,4,23,171,8,23,11,23,12,23,172,1,23,1,23,1,24,1,24,1,24,1,
        24,5,24,181,8,24,10,24,12,24,184,9,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,5,25,195,8,25,10,25,12,25,198,9,25,1,25,1,25,1,
        182,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,1,0,5,2,0,60,60,62,62,2,0,65,90,97,122,2,0,
        34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,214,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,
        1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,69,1,0,0,0,11,71,
        1,0,0,0,13,73,1,0,0,0,15,81,1,0,0,0,17,83,1,0,0,0,19,91,1,0,0,0,
        21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,103,1,0,0,0,29,105,
        1,0,0,0,31,114,1,0,0,0,33,116,1,0,0,0,35,121,1,0,0,0,37,133,1,0,
        0,0,39,135,1,0,0,0,41,143,1,0,0,0,43,151,1,0,0,0,45,158,1,0,0,0,
        47,170,1,0,0,0,49,176,1,0,0,0,51,190,1,0,0,0,53,54,5,115,0,0,54,
        55,5,105,0,0,55,56,5,103,0,0,56,57,5,109,0,0,57,58,5,97,0,0,58,2,
        1,0,0,0,59,60,5,91,0,0,60,4,1,0,0,0,61,62,5,93,0,0,62,6,1,0,0,0,
        63,64,5,101,0,0,64,65,5,118,0,0,65,66,5,101,0,0,66,67,5,110,0,0,
        67,68,5,116,0,0,68,8,1,0,0,0,69,70,5,123,0,0,70,10,1,0,0,0,71,72,
        5,125,0,0,72,12,1,0,0,0,73,74,5,110,0,0,74,75,5,103,0,0,75,76,5,
        108,0,0,76,77,5,111,0,0,77,78,5,98,0,0,78,79,5,97,0,0,79,80,5,108,
        0,0,80,14,1,0,0,0,81,82,5,58,0,0,82,16,1,0,0,0,83,84,5,115,0,0,84,
        85,5,103,0,0,85,86,5,108,0,0,86,87,5,111,0,0,87,88,5,98,0,0,88,89,
        5,97,0,0,89,90,5,108,0,0,90,18,1,0,0,0,91,92,5,40,0,0,92,20,1,0,
        0,0,93,94,5,44,0,0,94,22,1,0,0,0,95,96,5,41,0,0,96,24,1,0,0,0,97,
        98,5,119,0,0,98,99,5,104,0,0,99,100,5,101,0,0,100,101,5,114,0,0,
        101,102,5,101,0,0,102,26,1,0,0,0,103,104,5,46,0,0,104,28,1,0,0,0,
        105,106,5,116,0,0,106,107,5,101,0,0,107,108,5,109,0,0,108,109,5,
        112,0,0,109,110,5,108,0,0,110,111,5,97,0,0,111,112,5,116,0,0,112,
        113,5,101,0,0,113,30,1,0,0,0,114,115,5,35,0,0,115,32,1,0,0,0,116,
        117,5,116,0,0,117,118,5,114,0,0,118,119,5,117,0,0,119,120,5,101,
        0,0,120,34,1,0,0,0,121,122,5,118,0,0,122,123,5,97,0,0,123,124,5,
        114,0,0,124,36,1,0,0,0,125,134,7,0,0,0,126,127,5,60,0,0,127,134,
        5,61,0,0,128,129,5,62,0,0,129,134,5,61,0,0,130,134,5,61,0,0,131,
        132,5,33,0,0,132,134,5,61,0,0,133,125,1,0,0,0,133,126,1,0,0,0,133,
        128,1,0,0,0,133,130,1,0,0,0,133,131,1,0,0,0,134,38,1,0,0,0,135,139,
        2,65,90,0,136,138,7,1,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
        1,0,0,0,139,140,1,0,0,0,140,40,1,0,0,0,141,139,1,0,0,0,142,144,5,
        45,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,147,2,
        48,57,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,
        1,0,0,0,149,42,1,0,0,0,150,152,5,45,0,0,151,150,1,0,0,0,151,152,
        1,0,0,0,152,153,1,0,0,0,153,156,3,41,20,0,154,155,5,46,0,0,155,157,
        3,41,20,0,156,154,1,0,0,0,156,157,1,0,0,0,157,44,1,0,0,0,158,164,
        5,34,0,0,159,163,8,2,0,0,160,161,5,92,0,0,161,163,7,2,0,0,162,159,
        1,0,0,0,162,160,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,
        1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,34,0,0,168,46,
        1,0,0,0,169,171,7,3,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,
        1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,23,0,0,175,48,
        1,0,0,0,176,177,5,47,0,0,177,178,5,42,0,0,178,182,1,0,0,0,179,181,
        9,0,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,183,1,0,0,0,182,180,
        1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,42,0,0,186,187,
        5,47,0,0,187,188,1,0,0,0,188,189,6,24,0,0,189,50,1,0,0,0,190,191,
        5,47,0,0,191,192,5,47,0,0,192,196,1,0,0,0,193,195,8,4,0,0,194,193,
        1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,
        1,0,0,0,198,196,1,0,0,0,199,200,6,25,0,0,200,52,1,0,0,0,12,0,133,
        139,143,148,151,156,162,164,172,182,196,1,6,0,0
    ]

class scratchLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    OP = 19
    LABEL = 20
    INTNUMBER = 21
    NUMBER = 22
    STRING = 23
    SPACE = 24
    COMMENT = 25
    LINE_COMMENT = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'sigma'", "'['", "']'", "'event'", "'{'", "'}'", "'nglobal'", 
            "':'", "'sglobal'", "'('", "','", "')'", "'where'", "'.'", "'template'", 
            "'#'", "'true'", "'var'" ]

    symbolicNames = [ "<INVALID>",
            "OP", "LABEL", "INTNUMBER", "NUMBER", "STRING", "SPACE", "COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "OP", "LABEL", "INTNUMBER", 
                  "NUMBER", "STRING", "SPACE", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "scratch.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


